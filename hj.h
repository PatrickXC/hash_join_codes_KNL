typedef struct info_t_hj{
	pthread_t id;
	int seed;
	int thread;
	int threads;
	uint32_t thread_factor;
	uint32_t thread_factor2;
	uint32_t inner_factor;
	uint32_t outer_factor;
	size_t inner_tuples;
	size_t outer_tuples;
	size_t join_tuples;
	size_t inner_distinct;
	size_t outer_distinct;
	size_t join_distinct;
	uint32_t *inner_keys[4];
	uint32_t *inner_vals[4];
	uint32_t *outer_keys[4];
	uint32_t *outer_vals[4];
	uint32_t *join_keys;
	uint32_t *join_outer_vals;
	uint32_t *join_inner_vals;
	uint32_t **inner_counts;
	uint32_t **outer_counts;
	uint32_t *build_inner_counts;
	uint32_t *build_outer_counts;
	size_t *final_offsets;
	uint64_t *inner_checksum;
	uint64_t *outer_checksum;
	uint64_t real_time;
	uint64_t thread_time;
	double hash_table_load;
	size_t hash_table_limit;
	uint32_t *unique;
	uint32_t *unique_table;
	size_t unique_table_buckets;
	uint32_t unique_factor;
	size_t fanout[6];
	uint64_t times[8];
	size_t block_size;
	size_t block_limit;
	size_t buffer_size;
	size_t inner_thread_tuples;
	size_t outer_thread_tuples;
	double zipf ;
	volatile size_t *block_counter;
	volatile size_t *close_gaps_counter;
	pthread_barrier_t *barrier;
	uint64_t inner_sum;
	uint64_t outer_sum;
	double time;
	double time2;
	uint64_t **all_table;
	size_t *all_buckets;
	uint32_t *all_empty;
	uint32_t partitions;
	uint32_t num_outputs;
	uint32_t *inner_keys_mcdram[128];
	uint32_t *inner_vals_mcdram[128];
	uint32_t *outer_keys_mcdram[128];
	uint32_t *outer_vals_mcdram[128];
	size_t inner_size[128];
	size_t outer_size[128];
	uint32_t partition_size_mcdram;
	size_t inner_mcdram_size;
	size_t outer_mcdram_size;
	info_t_hj *peer[4];
	//for debug only
	double timelog[1024];
	int timestep;
	double ratio;
} info_t_hj;
void *generate_data_for_join(void *arg);
void *run_hj(void *arg);
void *mamalloc(size_t size);
uint64_t thread_time(void);
uint64_t real_time(void);
int hardware_threads(void);
void bind_thread(int thread, int threads);
void *align(const void *p);
int power_of_2(uint64_t x);
int odd_prime(uint64_t x);
double mysecond();

